import numpy as np

from src.Utils.grad_cam import grad_cam
from src.Utils.utils import combine_heatmaps


def iou(hvc_heatmap, cam_heatmap, epsilon=1e-5):
    """
    Calculate the intersection of union of two heat-mat matrix each with values of 0's and 1's
    :param hvc_heatmap: the heat-map generated by HVC framework             # shape [img_height, img_width]
    :param cam_heatmap: the heat-map generated by heatmap                   # shape [img_height, img_width]
    :param epsilon: float value to avoid dividing by zero
    """
    # calculate intersection and union
    union = np.maximum(hvc_heatmap, cam_heatmap)
    intersection = hvc_heatmap * cam_heatmap
    # count the number of ones
    union_occurrences = np.count_nonzero(union == 1)
    intersection_occurrences = np.count_nonzero(intersection == 1)
    iou = intersection_occurrences / (union_occurrences + epsilon)
    return iou


def calculate_iou(model, input_x, input_y, hvc_heatmap, cam_target_layer, output_directory, image_height, image_width, batch_size, vc_per_class):
    """
    Calculate the intersection of union (IoU) for two heat-maps in a batch
    :param model: the base_model
    :param input_x: Numpy array of original images                              # shape = [img_height, img_width, img_depth]
    :param input_y: the true labels of the input images                         # shape = [num_classes]
    :param hvc_heatmap: Numpy array of the upsampled heat-map                  # shape = [num_vc, img_height, img_width, img_depth]
    :param cam_target_layer:
    :param output_directory:
    :param image_height:
    :param image_width:
    :param batch_size:
    """
    hvc_heatmap = hvc_heatmap.astype(int)
    results = 0
    # get the cam heat-map
    _, cam_heatmap = grad_cam(model, input_x, input_y, cam_target_layer, output_directory, image_height, image_width, save_image=False)
    # get the combined hvc_heatmap
    hvc_heatmap_combined = combine_heatmaps(input_y, hvc_heatmap, vc_per_class)
    hvc_heatmap_combined = np.max(hvc_heatmap_combined, axis=-1)
    # calculate the IoU
    results += iou(hvc_heatmap_combined, cam_heatmap)
    return results / batch_size
